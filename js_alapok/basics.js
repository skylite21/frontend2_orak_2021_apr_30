// l√©trehozzuk a szam v√°ltoz√≥t √©s √©rtket is adunk neki.
// v√°ltoz√≥ l√©trehoz√°sa: deklar√°l√°s
// √©rt√©k ad√°s: value assignment
let szam = 9;

// value assignment
// a bal oldalon l√©v≈ë v√°ltoz√≥ba bele t√∂lt≈ëdik a jobb oldalon l√©v≈ë √©rt√©k
szam = 20;

// csak deklar√°l√°s
let myNumber;


// deklar√°lni h√°rom kulcssz√≥val lehet:
var a; // nem haszn√°ljuk
let b; // let-et akkor haszn√°ljuk a k√©s≈ëbb a v√°ltoz√≥ √©rt√©k√©t m√≥dos√≠tani akarjuk
const c = 10; // constans: akkor haszn√°ljuk ha nem akarjuk m√≥dos√≠tani az √©rt√©k√©t a v√°ltoz√≥nak

// sz√°m: nincs k√∂r√ºl√∂tte aposztrof/id√©z≈ëjel
a = 10;
b = 9;
console.log(a+b);

// string t√≠pus√∫ v√°ltoz√≥: sz√∂veg
let szoveg = 'hello';

console.log(szoveg.toUpperCase());


// t√∂mb: olyan t√≠pus ami t√∂bb m√°sik t√≠pust tud t√°rolni
const myArray = [ 3, 'hello', a, ['a','b'] ];

console.log(myArray);

// a t√∂mb√∂t null√°t√≥l indexelj√ºk: 
console.log(myArray[0]);
// a 4 elem≈± t√∂mb utols√≥ eleme a 3-adik lenne, 4-edik elem nem l√©tezik
console.log(myArray[4]);

// logikai √©rt√©k (boolean), true vagy false lehet az √©rt√©ke
let kapcsolo = true;

// javascript: dynamically typed programming language

console.log(typeof(kapcsolo));

function sayHello() {
  console.log('hello!');
  // return undefined
}


function addTwoNumbers(x, y) {
  const sum = y + x;
  console.log(sum);
}


addTwoNumbers(5, 9);

sayHello();

function addThreeNumbers(a, b, c) {
  const sum = a + b + c;
  return sum;
}

const result = addThreeNumbers(1, 2, 3);
console.log(result);

console.log(addThreeNumbers(1, 1, 1));

result;

// el√°gaz√°s: vez√©rl√©si szerkezet
if(kapcsolo === true) {
  console.log('a kapcsolo be van kapcsolva');
}


if(addThreeNumbers(1, 1, 1) === 3) {
  console.log('az addThreeNumbers j√≥l m≈±k√∂dik');
} else {
  console.log('az addThreeNumbers nem j√≥l m≈±k√∂dik');
}

let n = 9;
n !== 9 && n !== 3; // false
n !== 9 || n !== 3; // true

// ciklus: vez√©rl√©si szerkezet
// 0-t√≥l     10-ig  egyess√©vel
for(let i=0; i<=10; i++) {
  console.log(i+' hello');
}

n++; // n = n + 1;
console.log(n);

for(let i=10; i>=0; i--) {
  console.log(i+' hello');
}

// addig fut a ciklus am√≠g az n >= 0
while (n >= 0) {
  console.log('ez egy while ciklus');
  // cs√∂kkentj√ºk az n v√°ltoz√≥ √©rt√©k√©t 1-el
  n--; // n = n - 1;
}

const szamok = [2,5,4,5];

console.log('a t√∂mb hossza: '+szamok.length);

// az i v√°ltoz√≥ csak a for cikluson bel√ºl l√©tezik...
// block scope
for(let i=0; i<szamok.length; i++) {
  if(szamok[i] === 5) {
    console.log('a t√∂mb eleme: '+szamok[i]);
  }
}

// console.log(i); // undefined!!

// function scope:
function myFunc() {
  // lok√°lis v√°ltoz√≥ a myNum: csak a f√ºggv√©nyen bel√ºl l√©tezik
  const myNum = 10;
}
// not defined!! 
// console.log(myNum);


console.log('az n v√°ltoz√≥ t√≠pusa: '+typeof(n));


let eredmeny = parseInt('a');

console.log(eredmeny); // NaN : not a number
console.log('az eredmeny tipusa: '+typeof(eredmeny));

console.log(isNaN(eredmeny));

// mindig 3 egyenl≈ës√©gjellel vizsg√°ljuk az egyenl≈ës√©get
// mert a kett≈ë darab egyenl≈ës√©gjel nem vizsg√°l t√≠pust!

0 == 0; // true
0 == '0'; // true !!

0 === '0'; //false

0 == ''; //true !!

0 == '\n'; // true!!

'' == '\n'; // false üòì

console.log('ez egy uj sor:\n uj sorba ker√ºl');
